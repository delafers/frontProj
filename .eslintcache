[{"E:\\lastfront\\src\\index.js":"1","E:\\lastfront\\src\\reportWebVitals.js":"2","E:\\lastfront\\src\\Components\\Header\\Header.jsx":"3","E:\\lastfront\\src\\Components\\NavBar\\NavBar.jsx":"4","E:\\lastfront\\src\\Components\\Main\\Main\\Main.jsx":"5","E:\\lastfront\\src\\Components\\End\\End.jsx":"6","E:\\lastfront\\src\\Components\\Profile\\Profile.jsx":"7","E:\\lastfront\\src\\Components\\Main\\Post\\Post.tsx":"8","E:\\lastfront\\src\\Components\\Packs\\OneTypePack\\OneTypePack.jsx":"9","E:\\lastfront\\src\\render.jsx":"10","E:\\lastfront\\src\\Redux\\Main_reducer.ts":"11","E:\\lastfront\\src\\Components\\Gallery\\Gallery.tsx":"12","E:\\lastfront\\src\\Redux\\store.jsx":"13","E:\\lastfront\\src\\Redux\\Packs_reducer.js":"14","E:\\lastfront\\src\\Components\\Main\\Post\\PostContainer.tsx":"15","E:\\lastfront\\src\\Components\\Gallery\\GalleryContainer.tsx":"16","E:\\lastfront\\src\\Redux\\support_reducer.ts":"17","E:\\lastfront\\src\\Components\\Packs\\Packs.jsx":"18","E:\\lastfront\\src\\Components\\Support\\SupportContainer.tsx":"19","E:\\lastfront\\src\\Components\\Support\\OneTypePack\\OneTypePack.jsx":"20","E:\\lastfront\\src\\Components\\Support\\SupportAPIContainer.tsx":"21","E:\\lastfront\\src\\Components\\common\\Preloader\\preloader.js":"22","E:\\lastfront\\src\\Components\\Header\\HeaderContainer.jsx":"23","E:\\lastfront\\src\\api\\api.ts":"24","E:\\lastfront\\src\\hoc\\withAuthRedirect.tsx":"25","E:\\lastfront\\src\\Components\\Login\\Login.tsx":"26","E:\\lastfront\\src\\utils\\validators\\validator.tsx":"27","E:\\lastfront\\src\\Redux\\app_reducer.ts":"28","E:\\lastfront\\src\\Components\\Gallery\\ProfileStatus.tsx":"29","E:\\lastfront\\src\\utils\\objectHelper.js":"30","E:\\lastfront\\src\\Components\\common\\Paginator\\Paginator.tsx":"31","E:\\lastfront\\src\\Components\\Support\\OneUser.jsx":"32","E:\\lastfront\\src\\hoc\\LazyFunctoin.tsx":"33","E:\\lastfront\\src\\Components\\Gallery\\ProfileDataForms.tsx":"34","E:\\lastfront\\src\\Components\\common\\FormsControls\\FormsControls.tsx":"35","E:\\lastfront\\src\\Redux\\auth_reducer.ts":"36","E:\\lastfront\\src\\Redux\\Galerey_reducer.ts":"37","E:\\lastfront\\src\\types\\types.ts":"38","E:\\lastfront\\src\\Redux\\redux-store.ts":"39","E:\\lastfront\\src\\Redux\\user_selectors.ts":"40","E:\\lastfront\\src\\api\\authAPI.ts":"41","E:\\lastfront\\src\\api\\profileAPI.ts":"42","E:\\lastfront\\src\\api\\usersAPI.ts":"43","E:\\lastfront\\src\\App.tsx":"44","E:\\lastfront\\src\\Components\\Gallery\\ProfileStatusHook.tsx":"45"},{"size":223,"mtime":1626293140767,"results":"46","hashOfConfig":"47"},{"size":362,"mtime":499162500000,"results":"48","hashOfConfig":"49"},{"size":594,"mtime":1619220564207,"results":"50","hashOfConfig":"47"},{"size":1059,"mtime":1629896865473,"results":"51","hashOfConfig":"47"},{"size":355,"mtime":1612113431243,"results":"52","hashOfConfig":"47"},{"size":382,"mtime":1610532861058,"results":"53","hashOfConfig":"47"},{"size":223,"mtime":1612807101395,"results":"54","hashOfConfig":"47"},{"size":2589,"mtime":1641123364326,"results":"55","hashOfConfig":"47"},{"size":552,"mtime":1610906637552,"results":"56","hashOfConfig":"47"},{"size":0,"mtime":1611067701738,"results":"57","hashOfConfig":"49"},{"size":2239,"mtime":1641120410895,"results":"58","hashOfConfig":"47"},{"size":5196,"mtime":1642425560740,"results":"59","hashOfConfig":"47"},{"size":2398,"mtime":1611351663823,"results":"60","hashOfConfig":"49"},{"size":397,"mtime":1611751727518,"results":"61","hashOfConfig":"47"},{"size":567,"mtime":1641140843602,"results":"62","hashOfConfig":"47"},{"size":2952,"mtime":1642520154803,"results":"63","hashOfConfig":"47"},{"size":4422,"mtime":1639586492381,"results":"64","hashOfConfig":"47"},{"size":412,"mtime":1610905687342,"results":"65","hashOfConfig":"47"},{"size":2671,"mtime":1642512459799,"results":"66","hashOfConfig":"47"},{"size":554,"mtime":1612280341831,"results":"67","hashOfConfig":"49"},{"size":1113,"mtime":1629896248161,"results":"68","hashOfConfig":"47"},{"size":278,"mtime":1612713531305,"results":"69","hashOfConfig":"47"},{"size":484,"mtime":1623087907366,"results":"70","hashOfConfig":"47"},{"size":787,"mtime":1636916392636,"results":"71","hashOfConfig":"47"},{"size":879,"mtime":1641132658716,"results":"72","hashOfConfig":"47"},{"size":2645,"mtime":1642341016376,"results":"73","hashOfConfig":"47"},{"size":356,"mtime":1636210079861,"results":"74","hashOfConfig":"47"},{"size":955,"mtime":1642515836498,"results":"75","hashOfConfig":"47"},{"size":910,"mtime":1625511998949,"results":"76","hashOfConfig":"49"},{"size":242,"mtime":1624901444047,"results":"77","hashOfConfig":"47"},{"size":1390,"mtime":1629734329920,"results":"78","hashOfConfig":"47"},{"size":1250,"mtime":1627810692857,"results":"79","hashOfConfig":"47"},{"size":347,"mtime":1641125496050,"results":"80","hashOfConfig":"47"},{"size":3054,"mtime":1642419050914,"results":"81","hashOfConfig":"47"},{"size":1705,"mtime":1641211620646,"results":"82","hashOfConfig":"47"},{"size":2999,"mtime":1639582782929,"results":"83","hashOfConfig":"47"},{"size":4823,"mtime":1642426165693,"results":"84","hashOfConfig":"47"},{"size":848,"mtime":1629734329867,"results":"85","hashOfConfig":"47"},{"size":1369,"mtime":1641055562851,"results":"86","hashOfConfig":"47"},{"size":812,"mtime":1629890498246,"results":"87","hashOfConfig":"47"},{"size":901,"mtime":1636916217782,"results":"88","hashOfConfig":"47"},{"size":973,"mtime":1636914764526,"results":"89","hashOfConfig":"47"},{"size":696,"mtime":1636911083974,"results":"90","hashOfConfig":"47"},{"size":2735,"mtime":1642520588657,"results":"91","hashOfConfig":"47"},{"size":1326,"mtime":1642419049546,"results":"92","hashOfConfig":"47"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},"npw7r1",{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},"19lvysh",{"filePath":"99","messages":"100","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"95"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"95"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"114"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"95"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"114"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131","usedDeprecatedRules":"114"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"134","messages":"135","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136","usedDeprecatedRules":"114"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139","usedDeprecatedRules":"95"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142","usedDeprecatedRules":"114"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"145","messages":"146","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"114"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150","usedDeprecatedRules":"95"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153","usedDeprecatedRules":"95"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"160","usedDeprecatedRules":"114"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"167"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"174","usedDeprecatedRules":"95"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"179","usedDeprecatedRules":"114"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"182","usedDeprecatedRules":"114"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"185","usedDeprecatedRules":"114"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"188","usedDeprecatedRules":"114"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"191","messages":"192","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"193","usedDeprecatedRules":"114"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"202","usedDeprecatedRules":"114"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"205","messages":"206","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},"E:\\lastfront\\src\\index.js",[],["207","208"],"E:\\lastfront\\src\\reportWebVitals.js",[],["209","210"],"E:\\lastfront\\src\\Components\\Header\\Header.jsx",["211","212","213"],"import React from 'react';\r\nimport s from './Header.module.css'\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconst Header = (props) => {\r\n    return (\r\n            <header className={s.header}>\r\n                <a>\r\n                    <img src='https://pngimg.com/uploads/photoshop/photoshop_PNG11.png' />\r\n                </a>\r\n                {props.isAuth\r\n                    ? <a>{props.login}  <button onClick={props.logout}>Log out</button></a>\r\n                    : <NavLink to='/login' className={s.header}>Profile</NavLink>}\r\n            </header>\r\n    );\r\n}\r\nexport default Header","E:\\lastfront\\src\\Components\\NavBar\\NavBar.jsx",[],"E:\\lastfront\\src\\Components\\Main\\Main\\Main.jsx",[],"E:\\lastfront\\src\\Components\\End\\End.jsx",["214"],"import React from 'react';\r\nimport s from './End.module.css'\r\nconst End = () => {\r\n    return(\r\n        <div className={s.end}>\r\n            <p>\r\n                все права защищены\r\n            </p>\r\n        <p>\r\n            <img src='https://png.pngtree.com/element_our/sm/20180301/sm_5a9797d5c93d3.jpg'/>\r\n        </p>\r\n        </div>\r\n    )\r\n}\r\nexport default End","E:\\lastfront\\src\\Components\\Profile\\Profile.jsx",[],"E:\\lastfront\\src\\Components\\Main\\Post\\Post.tsx",["215","216","217","218"],"import React from 'react'\r\nimport s from './Post.module.css'\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validator\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Textarea} from \"../../common/FormsControls/FormsControls\";\r\nimport {InitialStateType, Top} from \"../../../Redux/Main_reducer\";\r\nimport {LoginFormTypes} from \"../../Login/Login\";\r\n\r\nconst maxLength25 = maxLengthCreator(25)\r\ntype ownProps = {\r\n    postsPage: InitialStateType,\r\n    Top: Top,\r\n    onPostChang: (comment:string) => void,\r\n    addComments: (post:string) => void,\r\n    BlockPost: string,\r\n    handleSubmit:LoginFormTypes\r\n}\r\ntype OnePostValues= {\r\n    name:string,\r\n    sr: string,\r\n    text: string\r\n}\r\nexport type PostFormTypes = {\r\n    post:string,\r\n}\r\nexport type PostFormTypesKeys = Extract<keyof PostFormTypes, string>\r\n\r\nconst Post: React.FC<OnePostValues> = (props) => {\r\n    return   (\r\n        <div className={s.post}>\r\n            <div className={s.prof}>\r\n            {props.name}\r\n            <img  src='https://sun9-39.userapi.com/cLfRr5r8qAegXK0iJE8wQ1oxwoIeIqjTHaz4WQ/8ItJwatmRkc.jpg'/>\r\n            </div>\r\n            <p>\r\n                {props.text}\r\n                A почему бы на главной странице не оставить свой важный текст???\r\n            </p>\r\n            <p>\r\n                 <img src={props.sr}/>\r\n            </p>\r\n            <form>\r\n            <p>\r\n                <button>comment</button>\r\n            </p>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst Posts:React.FC<InjectedFormProps<LoginFormTypes, ownProps> & ownProps> = ({Top, onPostChang, addComments,BlockPost, handleSubmit })=> {\r\n    let PostsElements = Top.map(post => <Post name={post.name} sr={post.sr} text={post.text}/>);\r\n    let NewComment = React.createRef();\r\n\r\n\r\n    let onPostChange = () => {\r\n        // @ts-ignore\r\n        let comment = NewComment.current.value;\r\n        onPostChang(comment);\r\n    }\r\n\r\n    let onAddComments = (formData:PostFormTypes) => {\r\n        addComments(formData.post);\r\n    }\r\n    return (\r\n        <div>\r\n            <p>\r\n                <form onSubmit={handleSubmit}>\r\n                    <Field component={Textarea}  name={'post'} placeholder={\"Text for post\"} validata={[required, maxLength25]}/>\r\n                    <button>send comment</button>\r\n                </form>\r\n            </p>\r\n            {PostsElements}\r\n        </div>\r\n    )\r\n};\r\nconst PostsReduxForm = reduxForm<LoginFormTypes, ownProps>({form: 'mainPost'})(Posts)\r\nexport default PostsReduxForm",["219","220"],"E:\\lastfront\\src\\Components\\Packs\\OneTypePack\\OneTypePack.jsx",["221"],"import React from 'react'\r\nimport s from './OneTypePack.module.css'\r\n\r\nconst Packi = (props) => {\r\n    return(\r\n        <div className={s.pack}>\r\n            <p>\r\n                {props.name}\r\n                <a href=''>\r\n                    {props.link}\r\n                </a>\r\n            </p>\r\n        </div>\r\n    )\r\n}\r\nconst OnePack = (props) => {\r\n    let PackModule =\r\n        props.Pack.map(p => <Packi name={p.name} link={p.linkdisk}/>)\r\n       return(\r\n        <div>\r\n            {PackModule}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default OnePack","E:\\lastfront\\src\\render.jsx",[],"E:\\lastfront\\src\\Redux\\Main_reducer.ts",[],"E:\\lastfront\\src\\Components\\Gallery\\Gallery.tsx",["222","223","224","225","226","227","228","229","230"],"import React, {ChangeEvent, useState} from 'react';\r\nimport s from './Gallery.module.css'\r\nimport Preloader from \"../common/Preloader/preloader\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {maxLengthCreator, required} from \"../../utils/validators/validator\";\r\nimport ProfileStatusHook from \"./ProfileStatusHook\";\r\nimport userPhoto from \"../../assets/images/User_Avatar.png\"\r\nimport ProfileDataFormField from \"./ProfileDataForms\";\r\nimport {setUserStatus} from \"../../Redux/Galerey_reducer\";\r\nimport {ContactsType, ProfileType} from \"../../types/types\";\r\n\r\nconst maxLength25 = maxLengthCreator(25)\r\ntype GalleryPropsType = {\r\n    GalleryPage:Array<any>,\r\n    updateImgURL: (comment: string) => void,\r\n    addPicture: () => void,\r\n    profile: ProfileType,\r\n    saveProfile:(profile:ProfileType) => Promise<any>,\r\n    BlockPost:string\r\n    isOwner: boolean\r\n    savePhoto: () => void\r\n    setUserStatus: () => void\r\n    getUserStatus?: () => void\r\n    goToEditMode?: () => void\r\n}\r\nconst Gallery:React.FC<GalleryPropsType> = (props) => {\r\n\r\n    let [editMode, setEditMode] = useState(false)\r\n    let GalleryImg = props.GalleryPage.map(p => <GalleryPost class={p.class} sr={p.name}/>)\r\n    let NewPicture = React.createRef();\r\n\r\n    let onGalChange = () => {\r\n        // @ts-ignore\r\n        let comment = NewPicture.current.value;\r\n        props.updateImgURL(comment);\r\n    }\r\n    let addPicture = () => {\r\n        props.addPicture();\r\n    }\r\n    if (!props.profile) {\r\n        return <Preloader />\r\n    }\r\n\r\n    const onSubmit = (formData:ProfileType) => {\r\n        props.saveProfile(formData).then(\r\n            () => {\r\n                setEditMode(false)\r\n            }\r\n        )\r\n    }\r\n    // @ts-ignore\r\n    return(\r\n        <div className={s.columngal}>\r\n            <div>\r\n                {editMode ? <ProfileDataFormField  savePhoto={props.savePhoto} profile={props.profile}\r\n                                                   isOwner={props.isOwner} onSubmit={onSubmit} /> :\r\n                    <ProfileData goToEditMode={() => {setEditMode(true)}} savePhoto={props.savePhoto} isOwner={props.isOwner}\r\n                                 profile={props.profile}   setUserStatus={props.setUserStatus} />}\r\n            </div>\r\n            <div>\r\n                <textarea >choose picture</textarea>\r\n                <button onClick={addPicture} >add</button>\r\n            </div>\r\n            {GalleryImg}\r\n        </div>\r\n    )\r\n}\r\ntype ProfileDataProps = {\r\n    savePhoto: (file: File) => void,\r\n    isOwner: boolean,\r\n    profile:ProfileType\r\n    setUserStatus: () => void\r\n    goToEditMode: () => void\r\n}\r\nconst ProfileData:React.FC<ProfileDataProps> = (props) => {\r\n    const onMainPhotoSelected = (e:ChangeEvent<HTMLInputElement>) => {\r\n        if(e.target.files?.length){\r\n            props.savePhoto(e.target.files[0])\r\n        }\r\n    }\r\n    return(\r\n        <div className={s.columngal}>\r\n            {props.isOwner && <div><button onClick={props.goToEditMode}>Edit</button></div>}\r\n            <div>\r\n                <img src={props.profile.photos.large || userPhoto}/>\r\n                {props.isOwner && <input type={\"file\"} onChange={onMainPhotoSelected}/>}\r\n            </div>\r\n            <div className={s.title}>\r\n                <b>Full name</b>: {props.profile.fullName}\r\n            </div>\r\n            <div className={s.title}>\r\n                <b>Looking for job </b>: {props.profile.lookingForAJob ? \"yes\" : \"no\"}\r\n            </div>\r\n            <div>\r\n                {props.profile.lookingForAJob &&\r\n                <div className={s.title}>\r\n                    <b>\r\n                        My skills:\r\n                    </b>\r\n                    {props.profile.lookingForAJobDescription}\r\n                </div>\r\n                }\r\n            </div>\r\n            <div className={s.title}>\r\n                <b>About me </b>: {props.profile.aboutMe}\r\n            </div>\r\n            <ProfileStatusHook setUserStatus={props.setUserStatus} status={\"Hello\"}/>\r\n            <div className={s.title}>\r\n                <b>Contacts</b>: {Object.keys(props.profile.contacts).map(\r\n                key =>{\r\n                    return <Contacts contactTitle={key} key={key}\r\n                                     contactValue={props.profile?.contacts[key as keyof ContactsType]}/>\r\n                }\r\n            )}\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\ntype Contacts = {\r\n    contactTitle: string,\r\n    contactValue: string\r\n}\r\nconst Contacts:React.FC<Contacts> = ({contactTitle,contactValue}) => {\r\n    return<div className={s.title}>\r\n        <b>{contactTitle}</b>: {contactValue}\r\n    </div>\r\n}\r\ntype GalleryPostProps = {\r\n    sr:string\r\n    class: string\r\n}\r\nconst GalleryPost:React.FC<GalleryPostProps> = (props) => {\r\n    return(\r\n        <div className={s.columngal}>\r\n            <div>\r\n                <img src={props.sr} alt='aaaaaaaaaaaa'/>\r\n                <img src='https://sun9-39.userapi.com/cLfRr5r8qAegXK0iJE8wQ1oxwoIeIqjTHaz4WQ/8ItJwatmRkc.jpg'/>\r\n                <img src='https://sun9-39.userapi.com/cLfRr5r8qAegXK0iJE8wQ1oxwoIeIqjTHaz4WQ/8ItJwatmRkc.jpg'/>\r\n            </div>\r\n            {props.sr}\r\n        </div>\r\n\r\n    )\r\n}\r\nexport default Gallery","E:\\lastfront\\src\\Redux\\store.jsx",[],"E:\\lastfront\\src\\Redux\\Packs_reducer.js",[],"E:\\lastfront\\src\\Components\\Main\\Post\\PostContainer.tsx",["231","232"],"import React from 'react'\r\nimport {actions, Top} from \"../../../Redux/Main_reducer\";\r\nimport {connect} from \"react-redux\";\r\nimport PostsReduxForm from \"./Post\";\r\nimport {AppStateType} from \"../../../Redux/redux-store\";\r\n\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    return{\r\n        Top: state.MainPage.Top,\r\n        BlockPost: state.MainPage.BlockPost\r\n    }\r\n}\r\ntype mapPropsType = {\r\n    Top: Top,\r\n    BlockPost: string\r\n}\r\n\r\n\r\n// @ts-ignore\r\nconst PostsContainer = connect(mapStateToProps, {...actions})(PostsReduxForm)\r\nexport default PostsContainer","E:\\lastfront\\src\\Components\\Gallery\\GalleryContainer.tsx",["233"],"E:\\lastfront\\src\\Redux\\support_reducer.ts",["234","235","236","237","238","239"],"import axios from \"axios\";\r\nimport {updateObjectInArray} from \"../utils/objectHelper\";\r\nimport {PhotosType, UserType} from \"../types/types\";\r\nimport {AppStateType, BaseThunkType, InferActionTypes} from \"./redux-store\";\r\nimport {Dispatch} from \"redux\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {usersAPI} from \"../api/usersAPI\";\r\n\r\nlet initialState = {\r\n    users: [] as Array<UserType>,\r\n    pageSize: 5,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isFetching: false,\r\n    followingInProgress: [2, 3] as Array<number> //id пользователей, на которых нельзя подписатья\r\n};\r\nexport type InitialStateType = typeof initialState\r\n\r\nconst supportReducer = (state = initialState, action: ActionTypes): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"FOLLOW\":\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.userId, \"id\", {followed: true})\r\n            }\r\n        case \"UNFOLLOW\":\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.userId, \"id\", {followed: false})\r\n            }\r\n        case \"SET_USERS\":\r\n            return {\r\n                ...state,\r\n                users: action.users\r\n            }\r\n        case \"SET_CURRENT_PAGE\":\r\n            return {\r\n                ...state,\r\n                currentPage: action.currentPage\r\n            }\r\n        case \"SET_TOTAL_USERS_COUNT\":\r\n            return {\r\n                ...state,\r\n                totalUsersCount: action.count\r\n            }\r\n\r\n        case \"TOGGLE_IS_FETCHING\":\r\n            return {\r\n                ...state,\r\n                isFetching: action.isFetching\r\n            }\r\n        case \"TOGGLE_IS_FOLLOWING_PROGRESS\":\r\n            // @ts-ignore\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.isFetching\r\n                    ? [...state.followingInProgress, action.userId]\r\n                    : state.followingInProgress.filter(id => id != action)\r\n            }\r\n        default:\r\n            return state;\r\n\r\n    }\r\n}\r\n\r\n\r\nexport const actions = {\r\n    followSuccess : (userId: number) => ({type: \"FOLLOW\", userId} as const),\r\n    unfollowSuccess : (userId: number) => ({type: \"UNFOLLOW\", userId} as const),\r\n    setUsers: (users: Array<UserType>) => ({type: \"SET_USERS\", users} as const),\r\n    setCurrentPage: (currentPage: number) => ({type: \"SET_CURRENT_PAGE\", currentPage} as const),\r\n    setTotalUsersCount: (totalCount: number) => ({\r\n        type: \"SET_TOTAL_USERS_COUNT\",\r\n        count: totalCount\r\n    }as const),\r\n    toggleIsFetching : (isFetching: boolean) => ({type: \"TOGGLE_IS_FETCHING\", isFetching} as const),\r\n    toggleFollowingProgress: (userId: number) => ({\r\n        type: \"TOGGLE_IS_FOLLOWING_PROGRESS\",\r\n        userId,\r\n        isFetching: true\r\n    } as const)\r\n}\r\n\r\ntype ActionTypes = InferActionTypes<typeof actions>\r\n\r\ntype getStateType = () => AppStateType\r\ntype DispatchType = Dispatch<ActionTypes>\r\ntype ThunkType = BaseThunkType<ActionTypes>\r\n\r\nexport const requestUsers = (page: number, pageSize: number): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        dispatch(actions.toggleIsFetching(true))\r\n        dispatch(actions.setCurrentPage(page))\r\n        let data = await usersAPI.getUsers(page, pageSize)\r\n        dispatch(actions.toggleIsFetching(false))\r\n        dispatch(actions.setUsers(data.items));\r\n        dispatch(actions.setTotalUsersCount(data.totalCount));\r\n\r\n    }\r\n}\r\nexport const _followUnfollowFlow = async (dispatch: DispatchType, userId: number, apiMethod: any,\r\n                                          actionCreator: (userId: number) => ActionTypes ) => {\r\n    dispatch(actions.toggleIsFetching(true))\r\n    let response = await apiMethod(userId)\r\n    if (response.data.resultCode == 0) {\r\n        dispatch(actionCreator(userId))\r\n    }\r\n    dispatch(actions.toggleIsFetching(false))\r\n}\r\nexport const follow = (userId: number): ThunkType => {\r\n    return async (dispatch) => {\r\n        _followUnfollowFlow(dispatch, userId, usersAPI.follow.bind(usersAPI), actions.followSuccess)\r\n    }\r\n}\r\nexport const unfollow = (userId: number): ThunkType => {\r\n    return async (dispatch) => {\r\n        _followUnfollowFlow(dispatch, userId, usersAPI.unfollow.bind(usersAPI), actions.unfollowSuccess)\r\n    }\r\n}\r\n\r\n\r\nexport default supportReducer","E:\\lastfront\\src\\Components\\Packs\\Packs.jsx",["240","241"],"import React from 'react'\r\nimport s from './Packs.module.css'\r\nimport OnePack from \"./OneTypePack/OneTypePack\";\r\n\r\nconst Packs = (props) => {\r\n    return(\r\n        <div>\r\n            <div >\r\n                <a>\r\n                    writeln\r\n                </a>\r\n            </div>\r\n            <p>\r\n                <OnePack Pack={props.Pack}/>\r\n            </p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Packs","E:\\lastfront\\src\\Components\\Support\\SupportContainer.tsx",["242","243"],"import React from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport {\r\n    follow, requestUsers,\r\n    unfollow\r\n} from \"../../Redux/support_reducer\";\r\nimport Chat from \"./SupportAPIContainer\";\r\nimport Preloader from \"../common/Preloader/preloader\";\r\nimport {compose} from \"redux\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {\r\n    getCurrentPage,\r\n    getFollowingInProgress,\r\n    getIsFetching,\r\n    getPageSize, getUsers,\r\n    getUsersCount, getUsersSuper\r\n} from \"../../Redux/user_selectors\";\r\nimport {UserType} from \"../../types/types\";\r\nimport {AppStateType} from \"../../Redux/redux-store\";\r\n\r\ntype MapStatePropsType = {\r\n    currentPage: number,\r\n    pageSize: number,\r\n    isFetching: boolean\r\n    totalUsersCount: number\r\n    users: Array<UserType>\r\n    followingInProgress: Array<number>\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    getUsers: (currentPage: number, pageSize: number) => void,\r\n    follow: (userId: number) => void\r\n    unfollow: (userId: number) => void\r\n}\r\ntype OwnPropsType = {\r\n\r\n}\r\ntype PropsType = MapStatePropsType & MapDispatchPropsType & OwnPropsType\r\nclass ChatContainer extends React.Component<PropsType> {\r\n    componentDidMount() {\r\n        debugger\r\n        this.props.getUsers(this.props.currentPage, this.props.pageSize)\r\n    }\r\n\r\n    onPageChanged = (pageNumber: number) => {\r\n      this.props.getUsers(pageNumber, this.props.pageSize)\r\n    }\r\n    render() {\r\n        return <>\r\n            {this.props.isFetching ? <Preloader/> : null}\r\n            <Chat totalUsersCount={this.props.totalUsersCount}\r\n                     pageSize={this.props.pageSize}\r\n                     currentPage={this.props.currentPage}\r\n                     onPageChanged={this.onPageChanged}\r\n                     users={this.props.users}\r\n                     unfollow={this.props.unfollow}\r\n                     follow={this.props.follow}\r\n                     followingInProgress={this.props.followingInProgress}\r\n                    />\r\n        </>\r\n    }\r\n}\r\nconst mapStateToProps =(state: AppStateType):MapStatePropsType =>{\r\n    debugger\r\n    return {\r\n        users: getUsersSuper(state),\r\n        pageSize: getPageSize(state),\r\n        totalUsersCount: getUsersCount(state),\r\n        currentPage: getCurrentPage(state),\r\n        isFetching: getIsFetching(state),\r\n        followingInProgress: getFollowingInProgress(state)\r\n    }\r\n}\r\nconst SupportContainer = (ChatContainer)\r\nexport default compose(\r\n    withAuthRedirect,\r\n    connect<MapStatePropsType, MapDispatchPropsType, OwnPropsType, AppStateType>(mapStateToProps,\r\n        {follow, unfollow, getUsers: requestUsers})\r\n)(ChatContainer) as React.ComponentType","E:\\lastfront\\src\\Components\\Support\\OneTypePack\\OneTypePack.jsx",["244"],"E:\\lastfront\\src\\Components\\Support\\SupportAPIContainer.tsx",["245"],"import React, {useState} from 'react'\r\nimport Paginator from \"../common/Paginator/Paginator\";\r\nimport User from \"./OneUser\";\r\nimport {UserType} from \"../../types/types\";\r\n\r\ntype PropsType = {\r\n    totalUsersCount: number,\r\n    pageSize: number,\r\n    currentPage: number,\r\n    portionSize?: number,\r\n    users: Array<UserType>,\r\n    onPageChanged: (pageNumber: number) => void\r\n    followingInProgress: Array<number>\r\n    follow: (userId: number) => void\r\n    unfollow: (userId: number) => void\r\n}\r\n\r\nconst Chat:React.FC<PropsType> = ({currentPage, onPageChanged, totalUsersCount,pageSize,followingInProgress,users,unfollow,follow,...props}) => {\r\n\r\n    return <div>\r\n        <Paginator currentPage={currentPage} onPageChanged={onPageChanged}\r\n                   totalItemsCount={totalUsersCount} pageSize={pageSize}/>\r\n        <div>\r\n        {\r\n            users.map(u => <User key={u.id} user={u}\r\n                                 followingInProgress={followingInProgress} unfollow={unfollow}\r\n                                 follow={follow}/>)\r\n\r\n        }\r\n        </div>\r\n    </div>\r\n}\r\n\r\nexport default Chat","E:\\lastfront\\src\\Components\\common\\Preloader\\preloader.js",["246"],"import preloader from \"../../../assets/images/preloader.svg\";\r\nimport s from './preloader.module.css'\r\nimport React from 'react'\r\nconst  Preloader = (props) => {\r\n    return <div className={s.preloader}>\r\n        <img src={preloader}/>\r\n    </div>\r\n}\r\n\r\nexport default Preloader","E:\\lastfront\\src\\Components\\Header\\HeaderContainer.jsx",["247"],"import React from 'react';\r\nimport Header from \"./Header\";\r\nimport {connect} from \"react-redux\";\r\nimport {getUserAuthData, logout} from \"../../Redux/auth_reducer\";\r\n\r\n\r\nclass HeaderContain extends React.Component {\r\n\r\n\r\n    render() {\r\n        return (\r\n            <Header {...this.props}/>\r\n        );\r\n    }\r\n}\r\nconst mapStateToProps= (state) => ({\r\n    isAuth: state.auth.isAuth,\r\n    login: state.auth.login,\r\n})\r\nexport default connect(mapStateToProps,{logout})(HeaderContain)\r\n","E:\\lastfront\\src\\api\\api.ts",[],"E:\\lastfront\\src\\hoc\\withAuthRedirect.tsx",[],"E:\\lastfront\\src\\Components\\Login\\Login.tsx",["248","249"],"import React from 'react'\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {connect} from \"react-redux\";\r\nimport {login, logout} from \"../../Redux/auth_reducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {createField, GetStringKeys, Input} from \"../common/FormsControls/FormsControls\";\r\nimport {maxLengthCreator, required} from \"../../utils/validators/validator\";\r\nimport s from \"./Login.module.css\"\r\nimport {AppStateType} from \"../../Redux/redux-store\";\r\nconst maxLength25 = maxLengthCreator(25)\r\n\r\ntype OwnProps = {\r\n    captchaUrl:string | null\r\n}\r\nconst LoginForm:React.FC<InjectedFormProps<LoginFormTypes, OwnProps> & OwnProps> = ({handleSubmit, captchaUrl, error}) => {\r\n    return(\r\n        <form onSubmit={handleSubmit}>\r\n            <div>\r\n                {createField(\"Login\",\"login\", [required, maxLength25],Input)}\r\n            </div>\r\n            <div>\r\n                {createField(\"Password\",'password',[required, maxLength25],Input, \"password\")}\r\n            </div>\r\n            <div>\r\n                <Field type={\"checkbox\"} name={\"rememberMe\"} component={'input'}/> remember me\r\n            </div>\r\n            {captchaUrl && <img src={captchaUrl}/>}\r\n            {captchaUrl && createField(\"Symbols from image\",\"captcha\", [], Input)}\r\n            { error && <div className={s.formSummaryError}>\r\n                {error}\r\n            </div>}\r\n            <div>\r\n                <button>Login</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\nconst LoginReduxForm = reduxForm<LoginFormTypes, OwnProps>({form: 'login'})(LoginForm)\r\n\r\n\r\ntype mapStateToPropsType = {\r\n    captchaUrl:string | null,\r\n    isAuth:boolean\r\n}\r\ntype mapDispatchPropsType = {\r\n    login:(email: string, password: string, rememberMe: boolean, captcha: string) => void\r\n}\r\nexport type LoginFormTypes = {\r\n    login:string,\r\n    password: string,\r\n    rememberMe: boolean,\r\n    captcha: string\r\n}\r\nexport type LoginFormTypesKeys = GetStringKeys<LoginFormTypes>\r\n\r\n\r\nconst Login:React.FC<mapStateToPropsType & mapDispatchPropsType> = ({isAuth, login, captchaUrl}) => {\r\n    const onSubmit = (formData:LoginFormTypes) => {\r\n        login(formData.login, formData.password, formData.rememberMe, formData.captcha)\r\n    }\r\n    if(isAuth) {\r\n        return <Redirect to={'/gallery'}/>\r\n    }\r\n    return<div>\r\n        <h1>Login</h1>\r\n        <LoginReduxForm onSubmit={onSubmit} captchaUrl={captchaUrl}/>\r\n    </div>\r\n}\r\nconst mapStateToProps = (state: AppStateType):mapStateToPropsType => ({\r\n    isAuth:state.auth.isAuth,\r\n    captchaUrl:state.auth.captchaUrl\r\n})\r\nexport default connect(mapStateToProps, {login}) (Login)","E:\\lastfront\\src\\utils\\validators\\validator.tsx",[],"E:\\lastfront\\src\\Redux\\app_reducer.ts",["250"],"E:\\lastfront\\src\\Components\\Gallery\\ProfileStatus.tsx",[],["251","252"],"E:\\lastfront\\src\\utils\\objectHelper.js",[],"E:\\lastfront\\src\\Components\\common\\Paginator\\Paginator.tsx",[],"E:\\lastfront\\src\\Components\\Support\\OneUser.jsx",["253","254","255"],"import React, {useState} from 'react'\r\nimport s from './Support.module.css'\r\nimport userImg from '../../assets/images/User_Avatar.png'\r\nimport {NavLink} from \"react-router-dom\";\r\nimport Paginator from \"../common/Paginator/Paginator\";\r\n\r\nlet User = ({user, followingInProgress,unfollow,follow }) => {\r\n\r\n    return <div className={s.user}>\r\n           <div >\r\n               <NavLink to={'/gallery/' + user.id}>\r\n                <div>\r\n                    <img src={user.photos.small != null ? user.photos.small : userImg} className={s.userimg}/>\r\n                    {user.name}\r\n                </div>\r\n                </NavLink>\r\n                <div>\r\n                    {user.followed\r\n                        ? <button className={s.userbuttonD} disabled={followingInProgress.some(id => id === user.id)}\r\n                                  onClick={() => {unfollow(user.id)}}>\r\n                            Unfollow</button>\r\n                        : <button className={s.userbuttonA} disabled={followingInProgress.some(id => id === user.id)}\r\n                                  onClick={() => {follow(user.id)}}>\r\n                            Follow</button>}\r\n                </div>\r\n            </div>\r\n\r\n    </div>\r\n\r\n}\r\n\r\n\r\nexport default User","E:\\lastfront\\src\\hoc\\LazyFunctoin.tsx",[],"E:\\lastfront\\src\\Components\\Gallery\\ProfileDataForms.tsx",["256","257","258"],"import React, {ChangeEvent} from \"react\";\r\nimport userPhoto from \"../../assets/images/User_Avatar.png\";\r\nimport ProfileStatusHook from \"./ProfileStatusHook\";\r\nimport s from \"./Gallery.module.css\";\r\nimport {createField, Input, Textarea} from \"../common/FormsControls/FormsControls\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {ProfileType} from \"../../types/types\";\r\n\r\ntype PropsForm = {\r\n    profile:ProfileType,\r\n    isOwner: boolean,\r\n    handleSubmit?: () => void,\r\n    savePhoto: (file:File) => void,\r\n    error?: string | null\r\n    initialValues?: ProfileType\r\n}\r\ntype OwnProps = {\r\n\r\n}\r\ntype ProfileDataFormType = {\r\n    fullName: string,\r\n    LookingForAJob: boolean,\r\n    lookingForAJobDescription: string,\r\n    aboutMe: string\r\n}\r\ntype KeysOfProfileData = Extract<keyof ProfileDataFormType, string>\r\n\r\nconst ProfileDataForm:React.FC<InjectedFormProps<ProfileDataFormType, PropsForm> & PropsForm> = (\r\n    {profile,isOwner,handleSubmit,savePhoto,\r\n        error }) => {\r\n\r\n    const onMainPhotoSelected = (e:ChangeEvent<HTMLInputElement>) => {\r\n        if(e.target.files?.length){\r\n            savePhoto(e.target.files[0])\r\n        }\r\n    }\r\n    return(\r\n        <form onSubmit={handleSubmit}>\r\n            <div><button>Save changes</button></div>\r\n            {error && <div>\r\n                {error}\r\n            </div>}\r\n            <div>\r\n                <img src={profile.photos.large || userPhoto}/>\r\n                {isOwner && <input type={\"file\"} onChange={onMainPhotoSelected}/>}\r\n            </div>\r\n            <div className={s.title}>\r\n                <b>Full name</b>: {createField<KeysOfProfileData>(\"Full name\", \"fullName\", [], Input)}\r\n            </div>\r\n            <div className={s.title}>\r\n                <b>Looking for job </b>\r\n                {createField<KeysOfProfileData>(\"\", \"LookingForAJob\", [], Input, {type:\"checkbox\"})}\r\n            </div>\r\n            <div>\r\n\r\n                <div className={s.title}>\r\n                    <b>\r\n                        My skills:\r\n                    </b>\r\n                    {createField<KeysOfProfileData>(\"My professional skills\", \"lookingForAJobDescription\", [], Textarea)}\r\n                </div>\r\n\r\n            </div>\r\n            <div className={s.title}>\r\n                <b>About me </b>\r\n                {createField<KeysOfProfileData>(\"About me\", \"aboutMe\", [], Textarea)}\r\n            </div>\r\n            <ProfileStatusHook  status={\"Hello\"}/>\r\n            <div className={s.title}>\r\n                <b>Contacts</b>: {Object.keys(profile.contacts).map(\r\n                key =>{\r\n                    return <div className={s.title} key={key}>\r\n                            <b>\r\n                                {key}\r\n                            </b>\r\n                        {createField(key, \"contacts.\"+ key, [], Input)}\r\n                    </div>\r\n                }\r\n            )}\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\nconst ProfileDataFormField = reduxForm<ProfileType, PropsForm>({form:\"edit-Profile\"})(ProfileDataForm)\r\n\r\nexport default ProfileDataFormField","E:\\lastfront\\src\\Components\\common\\FormsControls\\FormsControls.tsx",["259"],"import React from \"react\";\r\nimport {Field, WrappedFieldProps} from \"redux-form\";\r\nimport s from \"./FormsControls.module.css\"\r\nimport {ValidatorField} from \"../../../utils/validators/validator\";\r\n\r\ntype FormsControlParamsType = {\r\n    children: React.ReactNode,\r\n    meta:{\r\n        touched:boolean,\r\n        error:string\r\n    }\r\n}\r\n\r\ntype FormsControlsType = (params:FormsControlParamsType) => React.ReactNode\r\n\r\nexport const FormControl:FormsControlsType = ({children, meta: {touched, error}}) => {\r\n    const hasError = touched && error\r\n    return(\r\n        <div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Textarea: React.FC<WrappedFieldProps> = ({input, meta, ...props}) => {\r\n    return(\r\n        <div className={s.formControl + \" \" + s.error}>\r\n            <textarea {...input} {...props}/>\r\n        </div>\r\n    )\r\n}\r\nexport const Input: React.FC<WrappedFieldProps> = ({input, meta, ...props}) => {\r\n    const hasErrorZeroLength = meta.touched && meta.error\r\n    return(\r\n        <div className={s.formControl + \" \" + (hasErrorZeroLength ? s.error : \"\")}>\r\n            <input {...input} {...props}/>\r\n            {hasErrorZeroLength && <span>{meta.error}</span>}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport function createField<FormTypesKeys extends string> (placeholder:string | undefined, name:FormTypesKeys,\r\n                            validators:Array<ValidatorField>, component:React.FC<WrappedFieldProps>,\r\n                            type ={}, props={}, text=\"\") {\r\n    return <span>\r\n        <Field placeholder={placeholder} name={name}\r\n               validate={validators} component={component} type={type} {...props}/>{text}\r\n    </span>\r\n}\r\n\r\nexport type GetStringKeys<T> = Extract<T, string>","E:\\lastfront\\src\\Redux\\auth_reducer.ts",["260"],"import { Action } from \"redux\";\r\nimport {FormAction, stopSubmit} from \"redux-form\";\r\nimport {securityAPI} from \"../api/api\";\r\nimport {authAPI, ResultCodeForCaptchaEnum, ResultCodesEnum} from \"../api/authAPI\";\r\nimport {BaseThunkType, InferActionTypes} from \"./redux-store\";\r\n\r\n\r\nexport type InitialStateType2 = {\r\n    userId: number | null,\r\n    email: string | null,\r\n    username: string | null,\r\n    isAuth: boolean,\r\n    captchaUrl: string | null\r\n}\r\n\r\nlet initialState = {\r\n    userId: null as number | null,\r\n    email: null as string | null,\r\n    username: null as string | null,\r\n    isAuth: false,\r\n    captchaUrl: null as string | null\r\n};\r\n\r\nconst authReducer = (state = initialState, action: ActionsTypes):InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SET_USER_DATA':\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n            }\r\n        case '/security/get-captcha-url':\r\n            return {...state, captchaUrl: action.payload}\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    setAuthUserData: (userId: number | null, email: string | null, login: string | null, isAuth: boolean) => ({\r\n        type: 'SET_USER_DATA',\r\n        payload:{userId, email, login, isAuth}} as const),\r\n    setCaptcha: (captchaUrl: string) => ({type: '/security/get-captcha-url', payload: captchaUrl } as const)\r\n}\r\n\r\n\r\n\r\nexport const getUserAuthData = ():ThunkTypes => async (dispatch) => {\r\n    let meData = await authAPI.me()\r\n        if (meData.resultCode === ResultCodesEnum.Success){\r\n            let {id, email, login} = meData.data;\r\n            dispatch(actions.setAuthUserData(id , email, login, true ))\r\n        }\r\n}\r\nexport const getCaptcha = ():ThunkTypes => async (dispatch) => {\r\n    const response = await securityAPI.getCaptchaUrl()\r\n    const captchaUrl = response.url\r\n    dispatch(actions.setCaptcha(captchaUrl))\r\n}\r\nexport const login = (email: string, password: string, rememberMe: boolean, captcha: string):ThunkTypes => async (dispatch: any) => {\r\n\r\n    let loginData = await authAPI.login(email, password, rememberMe, captcha)\r\n        if (loginData.resultCode === ResultCodesEnum.Success){\r\n            dispatch(getUserAuthData())\r\n        } else if(loginData.resultCode === ResultCodeForCaptchaEnum.CaptchaIsRequired){\r\n            dispatch(getCaptcha())\r\n        } else {\r\n            const message = loginData.messages.length > 0 ? loginData.messages[0] : \"Some error\"\r\n            dispatch(stopSubmit(\"login\", {_error: message}))\r\n        }\r\n\r\n}\r\nexport const logout = ():ThunkTypes => async (dispatch) => {\r\n   let response = await authAPI.logout()\r\n        if (response.data.resultCode === 0){\r\n            dispatch(actions.setAuthUserData(null , null, null, false ))\r\n        }\r\n}\r\n\r\n\r\nexport type InitialStateType = typeof initialState\r\ntype ActionsTypes = InferActionTypes<typeof actions>\r\ntype ThunkTypes = BaseThunkType<ActionsTypes | FormAction>\r\n\r\nexport default authReducer","E:\\lastfront\\src\\Redux\\Galerey_reducer.ts",["261","262"],"import {FormAction, stopSubmit} from \"redux-form\";\r\nimport {GalleryType, PhotosType, ProfileType} from \"../types/types\";\r\nimport {profileAPI} from \"../api/profileAPI\";\r\nimport {usersAPI} from \"../api/usersAPI\";\r\nimport {BaseThunkType, InferActionTypes} from \"./redux-store\";\r\n\r\nconst ADD_IMG = 'ADD-IMG'\r\nconst CHANGE_PHOTO = 'IMG'\r\nconst DELETE_POST = 'ADD-IMG'\r\nconst UPDATE_SRC = 'UPDATE-SRC'\r\nconst SET_USER_PROFILE = 'SET_USER_PROFILE'\r\nconst SET_USER_STATUS = 'SET_USER_STATUS'\r\n\r\n\r\nlet initialState = {\r\n    GalleryAccounts: [\r\n        {class: 'Nature', name: 'https://sun9-40.userapi.com/impg/IpcbkULm7LqC4XQYLSG_swLa5cdNXXJ4QDerjQ/kdOHf8W9pUc.jpg?size=1080x754&quality=96&proxy=1&sign=9668b310115895160a96b40a1f0a0ba1&type=album', id: 1},\r\n        {\r\n            class: 'Brains',\r\n            name: 'https://sun9-19.userapi.com/impg/4cJlx83BGHrmc-qVpGH4db0aXKPihIP3w2dleA/sG643_rh_h0.jpg?size=1080x769&quality=96&proxy=1&sign=1b706df2572e01cd8a9ecc31bc900c14&type=album',\r\n            id: 2\r\n        },\r\n        {class: 'Games',\r\n            name: 'https://sun9-9.userapi.com/impg/315dd_uMOkpAmL5X4VwiD_L_9SZRAkZjVrZCPw/g4LPT_10jkw.jpg?size=277x329&quality=96&proxy=1&sign=37cd58191b5cf139cc7e98607d033033&type=album',\r\n            id: 3\r\n        }\r\n    ] as Array<GalleryType>,\r\n    BlockPost: 'send img',\r\n    profile: null as ProfileType | null,\r\n    status: null as string | null\r\n}\r\n\r\nexport type InitialStateType = typeof initialState\r\nexport type ActionsType = InferActionTypes<typeof actions>\r\ntype ThunkTypes = BaseThunkType<ActionsType | FormAction>\r\n\r\nexport const actions = {\r\n    AddImgToGallery: () => ({type: ADD_IMG}as const),\r\n    OnSrcPostChange: (comment: string) => ({type: UPDATE_SRC, imgsrc: comment}as const),\r\n    setUserProfile: (profile: ProfileType) => ({type: SET_USER_PROFILE, profile}as const),\r\n    savePhotoSuccess: (photos: PhotosType) => ({type: CHANGE_PHOTO, photos}as const),\r\n    setStatus: (status: string) => ({type: SET_USER_STATUS, status}as const),\r\n}\r\n\r\nconst GalleryReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case ADD_IMG: {\r\n            let newpick = {\r\n                class: 'face',\r\n                name: state.BlockPost,\r\n                id: 5\r\n            };\r\n            let stateCopy = {\r\n                ...state,\r\n                GalleryAccounts: [...state.GalleryAccounts, newpick],\r\n                BlockPost: '',\r\n            };\r\n            return stateCopy;\r\n        }\r\n        case UPDATE_SRC: {\r\n            let stateCopy = {...state};\r\n            stateCopy.BlockPost = action.imgsrc;\r\n            return stateCopy;\r\n        }\r\n        case SET_USER_PROFILE: {\r\n            debugger\r\n            return {...state, profile: action.profile}\r\n        }\r\n        /*case DELETE_POST: {\r\n            return {...state, GalleryAccounts: state.GalleryAccounts.filter(p => p.id != action.postId)}\r\n        }*/\r\n        case CHANGE_PHOTO: {\r\n            // @ts-ignore\r\n            return {...state, profile: {...state.profile, photos: action.photos}}\r\n        }\r\n        case SET_USER_STATUS: {\r\n            return {...state, status: action.status}\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//export const saveProfileSuccess = (photos: any) => ({type: CHANGE_PHOTO, photos})\r\n//export const DeletePost = (postId: number) => ({type: DELETE_POST, postId})\r\n\r\nexport const getUserProfile = (userId: number):ThunkTypes => async (dispatch) => {\r\n    let response = await usersAPI.galleryProfile(userId)\r\n    debugger\r\n    dispatch(actions.setUserProfile(response.data))\r\n}\r\n\r\nexport const savePhoto = (file: File):ThunkTypes => async (dispatch) => {\r\n    let response = await profileAPI.savePhoto(file)\r\n    // @ts-ignore\r\n    dispatch(savePhotoSuccess(response.data.photos))\r\n}\r\n\r\nexport const saveProfile = (profile: ProfileType):ThunkTypes => async (dispatch, getState) => {\r\n    // @ts-ignore\r\n    const userId:number = getState().auth.userId\r\n    let response = await profileAPI.saveProfile(profile)\r\n    if (response.resultCode === 0){\r\n        dispatch(getUserProfile(userId))\r\n    } else {\r\n        let message = response.messages.length > 0 ? response.messages[0] : \"\"\r\n        dispatch(stopSubmit(\"edit-Profile\", {_error: message}))\r\n    }\r\n}\r\nexport const setUserStatus = (status = \"\"):ThunkTypes => async (dispatch, getState) => {\r\n    // @ts-ignore\r\n    const userId:number = getState().auth.userId\r\n    let response = await profileAPI.updateStatus(status, userId)\r\n    dispatch(setUserStatus(status))\r\n}\r\nexport const getUserStatus = () => async (dispatch: any, getState:any) => {\r\n    const userId = getState().auth.userId\r\n    let response = await profileAPI.getStatus(userId)\r\n    dispatch(setUserStatus(response))\r\n}\r\n\r\n\r\nexport default GalleryReducer\r\n","E:\\lastfront\\src\\types\\types.ts",[],"E:\\lastfront\\src\\Redux\\redux-store.ts",["263"],"import {Action, applyMiddleware, combineReducers, compose, createStore} from \"redux\";\r\nimport mainReducer from \"./Main_reducer\";\r\nimport GalleryReducer from \"./Galerey_reducer\";\r\nimport packsReducer from \"./Packs_reducer\";\r\nimport supportReducer from \"./support_reducer\";\r\nimport authReducer from \"./auth_reducer\";\r\nimport thunkMiddleware, {ThunkAction} from \"redux-thunk\"\r\nimport { reducer as formReducer } from 'redux-form'\r\nimport appReducer from \"./app_reducer\";\r\n\r\nlet RootReducer = combineReducers({\r\n    MainPage: mainReducer,\r\n    GalleryPage: GalleryReducer,\r\n    Packs:packsReducer,\r\n    SupportPage: supportReducer,\r\n    auth: authReducer,\r\n    app: appReducer,\r\n    form: formReducer\r\n    }\r\n)\r\n\r\ntype RootReducerType = typeof RootReducer\r\ntype PropertiesTypes<T> = T extends {[key:string]: infer U} ? U : null\r\n\r\n\r\nexport type InferActionTypes<T> = T extends {[key:string]: (...args: any[]) => infer U} ? U : never\r\n\r\n\r\n\r\nexport type BaseThunkType<A extends Action = Action, R = Promise<void>> = ThunkAction<R, AppStateType, unknown, A>\r\n\r\n\r\nexport type AppStateType = ReturnType<RootReducerType>\r\n\r\n// @ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nconst store = createStore(RootReducer, composeEnhancers(applyMiddleware(thunkMiddleware)));\r\n// @ts-ignore\r\nwindow.__store__ = store;\r\n\r\nexport default store","E:\\lastfront\\src\\Redux\\user_selectors.ts",[],"E:\\lastfront\\src\\api\\authAPI.ts",[],"E:\\lastfront\\src\\api\\profileAPI.ts",[],"E:\\lastfront\\src\\api\\usersAPI.ts",["264"],"import {GetItemsType, instance, APIResponseType} from \"./api\";\r\nimport {AxiosPromise} from \"axios\";\r\n\r\nexport const usersAPI = {\r\n    getUsers(currentPage = 1, pageSize = 5) {\r\n        return instance.get<GetItemsType>(`users?page=${currentPage}&count=${pageSize}`,\r\n        ).then(response => {\r\n            return response.data\r\n        })\r\n    },\r\n    follow(userId:number) {\r\n        return instance.post<APIResponseType>(`follow/${userId}`, {})\r\n    },\r\n    unfollow(userId:number) {\r\n        return instance.delete(`follow/${userId}`).then(res => res.data) as Promise<APIResponseType>\r\n    },\r\n    galleryProfile(userId: number) {\r\n        return instance.get(`profile/` + userId)\r\n    }\r\n}","E:\\lastfront\\src\\App.tsx",["265","266","267"],"E:\\lastfront\\src\\Components\\Gallery\\ProfileStatusHook.tsx",[],{"ruleId":"268","replacedBy":"269"},{"ruleId":"270","replacedBy":"271"},{"ruleId":"268","replacedBy":"272"},{"ruleId":"270","replacedBy":"273"},{"ruleId":"274","severity":1,"message":"275","line":8,"column":17,"nodeType":"276","endLine":8,"endColumn":20},{"ruleId":"277","severity":1,"message":"278","line":9,"column":21,"nodeType":"276","endLine":9,"endColumn":91},{"ruleId":"274","severity":1,"message":"275","line":12,"column":23,"nodeType":"276","endLine":12,"endColumn":26},{"ruleId":"277","severity":1,"message":"278","line":10,"column":13,"nodeType":"276","endLine":10,"endColumn":94},{"ruleId":"277","severity":1,"message":"278","line":33,"column":13,"nodeType":"276","endLine":33,"endColumn":109},{"ruleId":"277","severity":1,"message":"278","line":40,"column":18,"nodeType":"276","endLine":40,"endColumn":39},{"ruleId":"279","severity":1,"message":"280","line":56,"column":9,"nodeType":"281","messageId":"282","endLine":56,"endColumn":21},{"ruleId":"279","severity":1,"message":"283","line":62,"column":9,"nodeType":"281","messageId":"282","endLine":62,"endColumn":22},{"ruleId":"268","replacedBy":"269"},{"ruleId":"270","replacedBy":"271"},{"ruleId":"274","severity":1,"message":"284","line":9,"column":17,"nodeType":"276","endLine":9,"endColumn":28},{"ruleId":"279","severity":1,"message":"285","line":4,"column":9,"nodeType":"281","messageId":"282","endLine":4,"endColumn":17},{"ruleId":"279","severity":1,"message":"286","line":5,"column":27,"nodeType":"281","messageId":"282","endLine":5,"endColumn":35},{"ruleId":"279","severity":1,"message":"287","line":9,"column":9,"nodeType":"281","messageId":"282","endLine":9,"endColumn":22},{"ruleId":"279","severity":1,"message":"288","line":12,"column":7,"nodeType":"281","messageId":"282","endLine":12,"endColumn":18},{"ruleId":"279","severity":1,"message":"289","line":32,"column":9,"nodeType":"281","messageId":"282","endLine":32,"endColumn":20},{"ruleId":"277","severity":1,"message":"278","line":85,"column":17,"nodeType":"276","endLine":85,"endColumn":69},{"ruleId":"290","severity":1,"message":"291","line":125,"column":7,"nodeType":"281","messageId":"292","endLine":125,"endColumn":34},{"ruleId":"277","severity":1,"message":"278","line":139,"column":17,"nodeType":"276","endLine":139,"endColumn":112},{"ruleId":"277","severity":1,"message":"278","line":140,"column":17,"nodeType":"276","endLine":140,"endColumn":112},{"ruleId":"279","severity":1,"message":"293","line":1,"column":8,"nodeType":"281","messageId":"282","endLine":1,"endColumn":13},{"ruleId":"279","severity":1,"message":"294","line":14,"column":6,"nodeType":"281","messageId":"282","endLine":14,"endColumn":18},{"ruleId":"279","severity":1,"message":"295","line":13,"column":9,"nodeType":"281","messageId":"282","endLine":13,"endColumn":25},{"ruleId":"279","severity":1,"message":"296","line":1,"column":8,"nodeType":"281","messageId":"282","endLine":1,"endColumn":13},{"ruleId":"279","severity":1,"message":"297","line":3,"column":9,"nodeType":"281","messageId":"282","endLine":3,"endColumn":19},{"ruleId":"279","severity":1,"message":"298","line":6,"column":9,"nodeType":"281","messageId":"282","endLine":6,"endColumn":20},{"ruleId":"299","severity":1,"message":"300","line":58,"column":65,"nodeType":"301","messageId":"302","endLine":58,"endColumn":67},{"ruleId":"279","severity":1,"message":"303","line":86,"column":6,"nodeType":"281","messageId":"282","endLine":86,"endColumn":18},{"ruleId":"299","severity":1,"message":"304","line":105,"column":34,"nodeType":"301","messageId":"302","endLine":105,"endColumn":36},{"ruleId":"305","severity":1,"message":"306","line":2,"column":8,"nodeType":"281","messageId":"282","endLine":2,"endColumn":9},{"ruleId":"274","severity":1,"message":"275","line":9,"column":17,"nodeType":"276","endLine":9,"endColumn":20},{"ruleId":"279","severity":1,"message":"307","line":15,"column":18,"nodeType":"281","messageId":"282","endLine":15,"endColumn":26},{"ruleId":"279","severity":1,"message":"308","line":74,"column":7,"nodeType":"281","messageId":"282","endLine":74,"endColumn":23},{"ruleId":"274","severity":1,"message":"284","line":9,"column":17,"nodeType":"276","endLine":9,"endColumn":28},{"ruleId":"279","severity":1,"message":"309","line":1,"column":16,"nodeType":"281","messageId":"282","endLine":1,"endColumn":24},{"ruleId":"277","severity":1,"message":"278","line":6,"column":9,"nodeType":"276","endLine":6,"endColumn":31},{"ruleId":"305","severity":1,"message":"310","line":4,"column":9,"nodeType":"281","messageId":"282","endLine":4,"endColumn":24},{"ruleId":"279","severity":1,"message":"311","line":4,"column":16,"nodeType":"281","messageId":"282","endLine":4,"endColumn":22},{"ruleId":"277","severity":1,"message":"278","line":27,"column":28,"nodeType":"276","endLine":27,"endColumn":51},{"ruleId":"279","severity":1,"message":"312","line":4,"column":7,"nodeType":"281","messageId":"282","endLine":4,"endColumn":26},{"ruleId":"268","replacedBy":"313"},{"ruleId":"270","replacedBy":"314"},{"ruleId":"305","severity":1,"message":"309","line":1,"column":16,"nodeType":"281","messageId":"282","endLine":1,"endColumn":24},{"ruleId":"305","severity":1,"message":"315","line":5,"column":8,"nodeType":"281","messageId":"282","endLine":5,"endColumn":17},{"ruleId":"277","severity":1,"message":"278","line":13,"column":21,"nodeType":"276","endLine":13,"endColumn":111},{"ruleId":"279","severity":1,"message":"316","line":6,"column":9,"nodeType":"281","messageId":"282","endLine":6,"endColumn":14},{"ruleId":"279","severity":1,"message":"317","line":17,"column":6,"nodeType":"281","messageId":"282","endLine":17,"endColumn":14},{"ruleId":"277","severity":1,"message":"278","line":44,"column":17,"nodeType":"276","endLine":44,"endColumn":63},{"ruleId":"279","severity":1,"message":"318","line":17,"column":11,"nodeType":"281","messageId":"282","endLine":17,"endColumn":19},{"ruleId":"279","severity":1,"message":"319","line":1,"column":10,"nodeType":"281","messageId":"282","endLine":1,"endColumn":16},{"ruleId":"279","severity":1,"message":"320","line":9,"column":7,"nodeType":"281","messageId":"282","endLine":9,"endColumn":18},{"ruleId":"279","severity":1,"message":"321","line":113,"column":9,"nodeType":"281","messageId":"282","endLine":113,"endColumn":17},{"ruleId":"279","severity":1,"message":"322","line":23,"column":6,"nodeType":"281","messageId":"282","endLine":23,"endColumn":21},{"ruleId":"279","severity":1,"message":"323","line":2,"column":9,"nodeType":"281","messageId":"282","endLine":2,"endColumn":21},{"ruleId":"279","severity":1,"message":"324","line":1,"column":17,"nodeType":"281","messageId":"282","endLine":1,"endColumn":25},{"ruleId":"279","severity":1,"message":"325","line":17,"column":9,"nodeType":"281","messageId":"282","endLine":17,"endColumn":25},{"ruleId":"279","severity":1,"message":"326","line":18,"column":8,"nodeType":"281","messageId":"282","endLine":18,"endColumn":15},"no-native-reassign",["327"],"no-negated-in-lhs",["328"],["327"],["328"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","@typescript-eslint/no-unused-vars","'onPostChange' is assigned a value but never used.","Identifier","unusedVar","'onAddComments' is assigned a value but never used.","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","'Redirect' is defined but never used.","'required' is defined but never used.","'setUserStatus' is defined but never used.","'maxLength25' is assigned a value but never used.","'onGalChange' is assigned a value but never used.","@typescript-eslint/no-redeclare","'Contacts' is already defined.","redeclared","'React' is defined but never used.","'mapPropsType' is defined but never used.","'withAuthRedirect' is defined but never used.","'axios' is defined but never used.","'PhotosType' is defined but never used.","'ThunkAction' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'getStateType' is defined but never used.","Expected '===' and instead saw '=='.","no-unused-vars","'s' is defined but never used.","'getUsers' is defined but never used.","'SupportContainer' is assigned a value but never used.","'useState' is defined but never used.","'getUserAuthData' is defined but never used.","'logout' is defined but never used.","'INITIALIZED_SUCCESS' is assigned a value but never used.",["327"],["328"],"'Paginator' is defined but never used.","'Field' is defined but never used.","'OwnProps' is defined but never used.","'hasError' is assigned a value but never used.","'Action' is defined but never used.","'DELETE_POST' is assigned a value but never used.","'response' is assigned a value but never used.","'PropertiesTypes' is defined but never used.","'AxiosPromise' is defined but never used.","'Suspense' is defined but never used.","'galleryContainer' is defined but never used.","'Gallery' is defined but never used.","no-global-assign","no-unsafe-negation"]